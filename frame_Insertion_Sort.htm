<!DOCTYPE html>
<html>
    <head>
         <link rel="stylesheet" href="style.css">
    </head>
    <body class="framebody">
        <h1>Insertion Sort</h1>
        <pre>
Insertion sort is a simple sorting algorithm that works similar to the way you 
sort playing cards in your hands. The array is virtually split into a sorted and 
an unsorted part. Values from the unsorted part are picked and placed at the 
correct position in the sorted part.

Algorithm 
To sort an array of size n in ascending order: 
1: Iterate from arr[1] to arr[n] over the array. 
2: Compare the current element (key) to its predecessor. 
3: If the key element is smaller than its predecessor, compare it to the elements 
before. Move the greater elements one position up to make space for the swapped element.
        </pre>
        <img src="images/insertionsort.png">
        <pre>
            <h3>Corresponding code</h3>
            // C program for insertion sort
            #include &lt;math.h&gt;
            #include &lt;stdio.h&gt;
             
            /* Function to sort an array using insertion sort*/
            void insertionSort(int arr[], int n)
            {
                int i, key, j;
                for (i = 1; i &lt; n; i++) {
                    key = arr[i];
                    j = i - 1;
             
                    /* Move elements of arr[0..i-1], that are
                      greater than key, to one position ahead
                      of their current position */
                    while (j >= 0 &amp;&amp; arr[j] > key) {
                        arr[j + 1] = arr[j];
                        j = j - 1;
                    }
                    arr[j + 1] = key;
                }
            }
             
            // A utility function to print an array of size n
            void printArray(int arr[], int n)
            {
                int i;
                for (i = 0; i &lt; n; i++)
                    printf("%d ", arr[i]);
                printf("\n");
            }
             
            /* Driver program to test insertion sort */
            int main()
            {
                int arr[] = { 12, 11, 13, 5, 6 };
                int n = sizeof(arr) / sizeof(arr[0]);
             
                insertionSort(arr, n);
                printArray(arr, n);
             
                return 0;
            }
            <h3>Output:-</h3>

            5 6 11 12 13

            <h3>complexity:-</h3>
Time Complexity: O(n<sup>2</sup>) 
Auxiliary Space: O(1)
Boundary Cases: Insertion sort takes maximum time to sort if elements are sorted in reverse 
order. And it takes minimum time (Order of n) when elements are already sorted.
       </pre>
    </body>

</html>