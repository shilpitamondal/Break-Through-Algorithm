<!DOCTYPE html>
<html>
    <head>
        <link rel="stylesheet" href="style.css">
    </head>
    <body class="framebody">
        <h1>Linear Search</h1>
        <pre>
<b>Working Principle:</b> Linear search (or sequential search) is a method for finding an 
element within a list. It sequentially checks each element of the list until that 
element being searched is found or the whole list has been searched.

A simple approach is to do a linear search, i.e  

-Start from the leftmost element of arr[] and one by one compare x with each element of arr[]
-If x matches with an element, return the index.
-If x doesnâ€™t match with any of elements, return -1.

<b>Algorithm:</b>
Let A[] be a array of n elements (A[0],A[1]....,A[n-1]) and x is the element being searched.
1.Set i to 0.
2.If A[i] = x, go to step 4.
3.Increase i by 1 and go to step 2.
4.f i < n, the search terminates successfully; return i. Else, the search terminates unsuccessfully

Examples :  

Input : arr[] = {10, 20, 80, 30, 60, 50, 110, 100, 130, 170}
x = 110;
Output : 6
Element x is present at index 6

Input : arr[] = {10, 20, 80, 30, 60, 50, 110, 100, 130, 170}
x = 175;
Output : -1
Element x is not present in arr[].
        </pre>
        <h3>Dry Run</h3>
        <img src="images/Linear-Search.png">
        <pre>
            <h3>Corresponding code:</h3>
            //this program linearly search the element "int x" from arr[]

            #include &lt;stdio.h&gt;
            
            //funtion to search the element x               
            int search(int arr[], int n, int x)
            {
                int i;
                for (i = 0; i &lt; n; i++)
                  if (arr[i] == x)
                    return i;
                return -1;
            }
                            
            
            int main(void)
            {
                int arr[] = { 2, 3, 4, 10, 40 };
                int x = 10;
            
                // n will give the size of the array
                int n = sizeof(arr) / sizeof(arr[0]);
                            
                // calling search function
                int result = search(arr, n, x);
                (result == -1)
                ? printf("Element is not present in array")
                : printf("Element is present at index %d \n", result);
                return 0;
            }

            <h3>Output:</h3>

            Element is present at index 3

            <h3>Complexity:</h3>
Worst-case time complexity(when the element is at the last index or not present in that array)-  O(n)
Best-case time complexity(when the element is at first index)-   O(1)
Average time complexity -  O(n) [1*(1/n)+2*(1/n)+..+n*(1/n)]=[(n+1)/2]

Worst-case space complexity- O(1) 
       </pre>
    </body>

</html>