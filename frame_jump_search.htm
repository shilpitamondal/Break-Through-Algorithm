<!DOCTYPE html>
<html>
    <head>
        <link rel="stylesheet" href="style.css">
    </head>
    <body class="framebody">
        <h1>Jump Search</h1>
        <pre>
<b>Working Principle:</b> Jump Search is a searching algorithm for sorted arrays.
The basic idea is to check fewer elements (than linear search) by jumping 
ahead by fixed steps or skipping some elements in place of searching all elements.

For example, suppose we have an array arr[] of size n and block (to be jumped) size m. 
Then we search at the indexes arr[0], arr[m], arr[2m]…..arr[km] and so on.
Once we find the interval (arr[km] &lt; x &lt; arr[(k+1)m]),
we perform a linear search operation from the index km to find the element x.
 
<b>Example:</b>
Let’s consider the following array:
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]. 
Length of the array is 16.
Jump search will find the value of 55 with the following steps assuming that the
block size to be jumped is 4.
STEP 1: Jump from index 0 to index 4;
STEP 2: Jump from index 4 to index 8;
STEP 3: Jump from index 8 to index 12;
STEP 4: Since the element at index 12 is greater than 55 we will jump back a step to 
        come to index 8.
STEP 5: Perform linear search from index 8 to get the element 55.

<b>Algorithm:</b>
Let A[] be a array of n sorted elements (A[0],A[1]....,A[n-1]) and x is the element being searched.
1.Set step = squareroot(n) and prev = 0
2.While A[min(step, n)-1] &lt; x   
   prev = step 
   step += sqareroot(n) 
   if (prev >= n) 
       return nothing

3.While (A[prev]<x) 
      prev++
      if (prev == min(step, n)) 
        return nothing

4.if (arr[prev] == x) 
    return prev 

5.else return nothing 

    
 </pre>
        <img src="images/jump.png" alt width="539" height="300">
        <pre>
<h3>Corresponding code:</h3>
            // C++ program to implement Jump Search 
  
            #include &lt;bits/stdc++.h&gt; 
            using namespace std; 
              
            int jumpSearch(int arr[], int x, int n) 
            { 
                // Finding block size to be jumped 
                int step = sqrt(n); 
              
                // Finding the block where element is 
                // present (if it is present) 
                int prev = 0; 
                while (arr[min(step, n)-1] &lt; x) 
                { 
                    prev = step; 
                    step += sqrt(n); 
                    if (prev >= n) 
                        return -1; 
                } 
              
                // Doing a linear search for x in block 
                // beginning with prev. 
                while (arr[prev] &lt; x) 
                { 
                    prev++; 
              
                    // If we reached next block or end of 
                    // array, element is not present. 
                    if (prev == min(step, n)) 
                        return -1; 
                } 
                // If element is found 
                if (arr[prev] == x) 
                    return prev; 
              
                return -1; 
            } 
              
            // Driver program to test function 
            int main() 
            { 
                int arr[] = { 0, 1, 1, 2, 3, 5, 8, 13, 21, 
                            34, 55, 89, 144, 233, 377, 610 }; 
                int x = 55; 
                int n = sizeof(arr) / sizeof(arr[0]); 
                  
                // Find the index of 'x' using Jump Search 
                int index = jumpSearch(arr, x, n); 
              
                // Print the index where 'x' is located 
                cout &lt;&lt; "\nNumber " &lt;&lt; x &lt;&lt; " is at index "&lt;&lt; index; 
                return 0; 
            } 
             
<h3>Output:</h3>

            Number 55 is at index 10

<h3>Complexity:</h3>
Time Complexity : O(√n) 
The size of a block to be jumped is (√ n). This makes the time complexity of Jump Search O(√ n).

Space Complexity : O(1)
            
                  
        </pre>
    </body>

</html>