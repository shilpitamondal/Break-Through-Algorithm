<!DOCTYPE html>
<html>
    <head>
    	 <link rel="stylesheet" href="style.css">
    </head>
    <body class="framebody">
        <h1> Tree Data Structure</h1>
        <pre>
A tree is a nonlinear hierarchical data structure that consists of nodes 
connected by edges.
<b>Why Tree Data Structure?</b>
Other data structures such as arrays, linked list, stack, and queue are linear 
data structures that store data sequentially. In order to perform any operation 
in a linear data structure, the time complexity increases with the increase in 
the data size. Whereas Different tree data structures allow quicker and easier 
access to the data    

<b>Tree Terminologies:</b> 
1.Node:A node is an entity that contains a key or value and pointers to its child 
       nodes.     	
       The last nodes of each path are called leaf nodes that do not contain a 
       link/pointer to child nodes.
       The node having at least a child node is called an internal/parent node.
2.Edge:It is the link between any two nodes.
3.Root:It is the topmost node of a tree.
4.Height of a Node: Number of edges from the node to the deepest leaf.
5.Depth of a Node:The depth of a node is the number of edges from the root to 
                  the node.
4.Height of a Tree: Height of the root node or the depth of the deepest node.
5.Degree of a Node:Total number of branches of that node.
6.Forest:A collection of disjoint trees is called a forest.
7.Tree Traversal:In order to perform any operation on a tree, you need to reach 
                 to the specific node. The tree traversal algorithm helps in 
                 visiting a required node in the tree.

<img src="images/RootedTree.png">
        </pre>
</body>

</html>