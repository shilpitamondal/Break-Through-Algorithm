<!DOCTYPE html>
<html>
    <head>
        <link rel="stylesheet" href="style.css">
    </head>
    <body class="framebody">
        <h1>Interpolation Search</h1>
        <pre>
<b>Working Principle:</b> Interpolation search is an improved version of binary search.
This search algorithm works on the probing position of the required value. For this 
algorithm to work properly, the data collection should be in a sorted form and uniformly
distributed.
For example, if the value of the key is closer to the last element, interpolation search
is likely to start search toward the end side. 

The formula for pos can be derived as follows.

Let's assume that the elements of the array are linearly distributed. 

General equation of line : y = m*x + c.
y is the value in the array and x is its index.

Now putting value of lo,hi and x in the equation
arr[hi] = m*hi+c ----(1)
arr[lo] = m*lo+c ----(2)
x = m*pos + c     ----(3)

m = (arr[hi] - arr[lo] )/ (hi - lo)

subtracting eqxn (2) from (3)
x - arr[lo] = m * (pos - lo)
lo + (x - arr[lo])/m = pos
pos = lo + (x - arr[lo]) *(hi - lo)/(arr[hi] - arr[lo])
          
<h3>Algorithm:</h3> 
Let A[] be a array of n sorted and uniformly distributed elements (A[0],A[1]....,A[n-1])
and x is the element being searched.
Step1: In a loop, calculate the value of “pos” using the probe position formula. 
Step2: If it is a match, return the index of the item, and exit. 
Step3: If the item is less than arr[pos], calculate the probe position of the left sub-array. 
Otherwise calculate the same in the right sub-array. 
Step4: Repeat until a match is found or the sub-array reduces to zero. 

<b>Dry Run:</b>
        </pre>
        <img src="images/interpolation.png">
        <pre>
<h3>Corresponding code:</h3>
                
            // C program to implement interpolation search
            // with recursion
            #include &lt;stdio.h&gt;
             
            // If x is present in arr[0..n-1], then returns
            // index of it, else returns -1.
            int interpolationSearch(int arr[], int lo, int hi, int x)
            {
                int pos;
                // Since array is sorted, an element present
                // in array must be in range defined by corner
                if (lo &lt;= hi &amp;&amp; x >= arr[lo] &amp;&amp; x &lt;= arr[hi]) {
                    // Probing the position with keeping
                    // uniform distribution in mind.
                    pos = lo
                          + (((double)(hi - lo) / (arr[hi] - arr[lo]))
                             * (x - arr[lo]));
             
                    // Condition of target found
                    if (arr[pos] == x)
                        return pos;
             
                    // If x is larger, x is in right sub array
                    if (arr[pos] &lt; x)
                        return interpolationSearch(arr, pos + 1, hi, x);
             
                    // If x is smaller, x is in left sub array
                    if (arr[pos] > x)
                        return interpolationSearch(arr, lo, pos - 1, x);
                }
                return -1;
            }
             
            // Driver Code
            int main()
            {
                // Array of items on which search will
                // be conducted.
                int arr[] = { 10, 12, 13, 16, 18, 19, 20, 21,
                              22, 23, 24, 33, 35, 42, 47 };
                int n = sizeof(arr) / sizeof(arr[0]);
             
                int x = 18; // Element to be searched
                int index = interpolationSearch(arr, 0, n - 1, x);
             
                // If element was found
                if (index != -1)
                    printf("Element found at index %d", index);
                else
                    printf("Element not found.");
                return 0;
            }
<h3>Output:</h3>
            Element found at index 4

<h3>Complexity:</h3>
Best Case time complexity: When the given array is Uniformly distributed, then the 
best case for this algorithm occurs which calculates the index of the search key 
in one step only taking constant or O(1) time.

Average Case time complexity : If the array is not fairly distributed but sorted 
the average case occurs with runtime as O(log (log n))

Worst Case time complexity : Where we need to traverse all the element of array is O(n)
            
            
       </pre>
    </body>

</html>