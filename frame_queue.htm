<!DOCTYPE html>
<html>
    <head>
        <link rel="stylesheet" href="style.css">
    </head>
    <body class="framebody">
        <h1>Queue Data Structure</h1>
        <pre>
Like Stack, Queue is a linear structure which follows a particular order in 
which the operations are performed. The order is First In First Out (FIFO).  
A good example of queue is any queue of consumers for a resource where the 
consumer that came first is served first. 
The difference between stacks and queues is in removing. In a stack we remove 
the item the most recently added; in a queue, we remove the item the least 
recently added.

<b>Operations on Queue:</b> 
1.Enqueue: Adds an item to the queue. If the queue is full, then it is said to 
be an Overflow condition. 
2.Dequeue: Removes an item from the queue. The items are popped in the same 
order in which they are pushed. If the queue is empty, then it is said to be 
an Underflow condition. 
3.Front: Get the front item from queue. 
4.Rear: Get the last item from queue. 

<img src="images/queue.png" width=50%>
<b>Application:</b>
Queue is used when things donâ€™t have to be processed immediately, but have to 
be processed in First In First Out order . This property of Queue makes it 
also useful in following kind of scenarios. 

1) When a resource is shared among multiple consumers. Examples include CPU 
scheduling, Disk Scheduling. 
2) When data is transferred asynchronously (data not necessarily received 
at same rate as sent) between two processes. Examples include IO Buffers, 
pipes, file IO, etc. 
3) In Operating systems:
       a) Semaphores
       b) FCFS ( first come first serve) scheduling, example: FIFO queue
       c) Spooling in printers
       d) Buffer for devices like keyboard
4) In Networks:
       a) Queues in routers/ switches 
       b) Mail Queues
5) Variations: ( Deque, Priority Queue, Doubly Ended Priority Queue )

<b>Corresponding Code:</b>
#include &lt;stdio.h&gt;   
int queue[100],i,choice=0,n,front=-1,rear=-1;  
void enqueue();  
void dequeue();  
void show();  
void main ()  
{  
      
    printf("Enter the number of elements in the queue:  ");   
    scanf("%d",&n);  
    printf("*********Queue operations using array*********");  
  
printf("\n----------------------------------------------\n");  
    while(choice != 4)  
    {  
        printf("Choose one from the below options...\n");  
        printf("\n1.Enqueue\n2.Dequeue\n3.Show\n4.Exit");  
        printf("\n Enter your choice \n");        
        scanf("%d",&choice);  
        switch(choice)  
        {  
            case 1:  
            {   
                enqueue();  
                break;  
            }  
            case 2:  
            {  
                dequeue();  
                break;  
            }  
            case 3:  
            {  
                show();  
                break;  
            }  
            case 4:   
            {  
                printf("Exiting....");  
                break;   
            }  
            default:  
            {  
                printf("Please Enter valid choice\n");  
            }   
        };  
    }  
}   
  
void enqueue ()  
{  
     int item;  
    printf("\nEnter the element\n");  
    scanf("\n%d",&item);      
    if(rear == n-1)  
    {  
        printf("\nOVERFLOW\n");  
        return;  
    }  
    if(front == -1 && rear == -1)  
    {  
        front = 0;  
        rear = 0;  
    }  
    else   
    {  
        rear = rear+1;  
    }  
    queue[rear] = item;  
    printf("\nValue inserted \n");   
}   
  
void dequeue ()   
{   
    int item;   
    if (front == -1 || front > rear)  
    {  
        printf("\nUNDERFLOW\n");  
        return;  
              
    }  
    else  
    {  
        item = queue[front];  
        if(front == rear)  
        {  
            front = -1;  
            rear = -1 ;  
        }  
        else   
        {  
            front = front + 1;  
        }  
        printf("\nvalue deleted\n ");  
    }  
}   
void show()  
{  
    int i;  
    if(rear == -1)  
    {  
        printf("\nEmpty queue\n");  
    }  
    else  
    {   printf("\nprinting values .....\n");  
        for(i=front;i<=rear;i++)  
        {  
            printf("\n%d\n",queue[i]);  
        }     
    }  
}  


<b>Output: </b>

Enter the number of elements in the queue:  3
*********Queue operations using array*********
----------------------------------------------
Choose one from the below options...
1.Enqueue
2.Dequeue
3.Show
4.Exit
 Enter your choice 
1
Enter the element
11
Value inserted 
Choose one from the below options...
1.Enqueue
2.Dequeue
3.Show
4.Exit
 Enter your choice 
1
Enter the element
22
Value inserted 
Choose one from the below options...
1.Enqueue
2.Dequeue
3.Show
4.Exit
 Enter your choice 
1
Enter the element
33
Value inserted 
Choose one from the below options...
1.Enqueue
2.Dequeue
3.Show
4.Exit
 Enter your choice 
1
Enter the element
44
OVERFLOW
Choose one from the below options...
1.Enqueue
2.Dequeue
3.Show
4.Exit
 Enter your choice 
3
printing values .....

11
22
33
Choose one from the below options...
1.Enqueue
2.Dequeue
3.Show
4.Exit
 Enter your choice 
2
value deleted 
Choose one from the below options...
1.Enqueue
2.Dequeue
3.Show
4.Exit
 Enter your choice 
3
printing values .....

22
33
Choose one from the below options...
1.Enqueue
2.Dequeue
3.Show
4.Exit
 Enter your choice 
4
Exiting....

<b>Complexity:</b>
enqueue(), dequeue() all take O(1) time.


       </pre>
    </body>

</html>