<!DOCTYPE html>
<html>
    <head>
         <link rel="stylesheet" href="style.css">
    </head>
    <body class="framebody">
        <h1>Bubble sort</h1>
        <pre>
<b>Working Principle:</b>Bubble Sort algorithm works by repeatedly swapping the adjacent 
elements if they are in wrong order.The pass through the list is repeated until the 
list is sorted.

<b>Example:</b>
First Pass:
( 5 1 4 2 8 ) –> ( 1 5 4 2 8 ), Here, algorithm compares the first two elements, 
                                and swaps since 5 > 1.
( 1 5 4 2 8 ) –>  ( 1 4 5 2 8 ), Swap since 5 > 4
( 1 4 5 2 8 ) –>  ( 1 4 2 5 8 ), Swap since 5 > 2
( 1 4 2 5 8 ) –> ( 1 4 2 5 8 ), Now, since these elements are already in order (8 > 5), 
                                 algorithm does not swap them.

Second Pass:
( 1 4 2 5 8 ) –> ( 1 4 2 5 8 )
( 1 4 2 5 8 ) –> ( 1 2 4 5 8 ), Swap since 4 > 2
( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
( 1 2 4 5 8 ) –>  ( 1 2 4 5 8 )
Now, the array is already sorted, but our algorithm does not know if it is completed. 
The algorithm needs one whole pass without any swap to know it is sorted.

Third Pass:
( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )

<b>Algorithm:</b>
1.Starting with the first element(index = 0), compare the current element with the 
  next element of the array.
2.If the current element is greater than the next element of the array, swap them.
3.If the current element is less than the next element, move to the next element. 
  Repeat Step 1.
4.Iterate step 1 , 2 and 3 till the array is sorted.


<b>Dry Run:</b>
<img src="images/bubble-shrt.png">
        </pre>
        
        <pre>
<h3>Corresponding code:</h3>
                
            // C program for implementation of Bubble sort
            #include &lt;stdio.h&gt;
              
            void swap(int *xp, int *yp)
            {
                int temp = *xp;
                *xp = *yp;
                *yp = temp;
            }
              
            // A function to implement bubble sort
            void bubbleSort(int arr[], int n)
            {
               int i, j;
               for (i = 0; i &lt; n-1; i++)      
              
                   // Last i elements are already in place   
                   for (j = 0; j &lt; n-i-1; j++) 
                       if (arr[j] > arr[j+1])
                          swap(&amp;arr[j], &amp;arr[j+1]);
            }
              
            /* Function to print an array */
            void printArray(int arr[], int size)
            {
                int i;
                for (i=0; i &lt; size; i++)
                    printf("%d ", arr[i]);
                printf("\n");
            }
              
            // Driver program to test above functions
            int main()
            {
                int arr[] = {64, 34, 25, 12, 22, 11, 90};
                int n = sizeof(arr)/sizeof(arr[0]);
                bubbleSort(arr, n);
                printf("Sorted array: \n");
                printArray(arr, n);
                return 0;
            }
<h3>Output:</h3>

            Sorted array:
            11 12 22 25 34 64 90

<h3>Complexity:</h3>
Worst-case time complexity  - O(n<sup>2</sup>) 
Best-case time complexity  -  O(n) 
Average-case time complexity - O(n<sup>2</sup>) 

Space complexity - O(1) 
           
       </pre>
    </body>

</html>