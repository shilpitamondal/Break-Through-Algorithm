<!DOCTYPE html>
<html>
    <head>
         <link rel="stylesheet" href="style.css">
    </head>
    <body class="framebody">
        <h1>Bubble sort</h1>
        <pre>
Bubble Sort is the simplest sorting algorithm that works by repeatedly swapping 
the adjacent elements if they are in wrong order.

Example:
First Pass:
( 5 1 4 2 8 ) –> ( 1 5 4 2 8 ), Here, algorithm compares the first two elements, 
                                and swaps since 5 > 1.
( 1 5 4 2 8 ) –>  ( 1 4 5 2 8 ), Swap since 5 > 4
( 1 4 5 2 8 ) –>  ( 1 4 2 5 8 ), Swap since 5 > 2
( 1 4 2 5 8 ) –> ( 1 4 2 5 8 ), Now, since these elements are already in order (8 > 5), 
                                 algorithm does not swap them.

Second Pass:
( 1 4 2 5 8 ) –> ( 1 4 2 5 8 )
( 1 4 2 5 8 ) –> ( 1 2 4 5 8 ), Swap since 4 > 2
( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
( 1 2 4 5 8 ) –>  ( 1 2 4 5 8 )
Now, the array is already sorted, but our algorithm does not know if it is completed. 
The algorithm needs one whole pass without any swap to know it is sorted.

Third Pass:
( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )


        </pre>
        
        <pre>
            <h3>Corresponding code</h3>
                
            // C program for implementation of Bubble sort
            #include &lt;stdio.h&gt;
              
            void swap(int *xp, int *yp)
            {
                int temp = *xp;
                *xp = *yp;
                *yp = temp;
            }
              
            // A function to implement bubble sort
            void bubbleSort(int arr[], int n)
            {
               int i, j;
               for (i = 0; i &lt; n-1; i++)      
              
                   // Last i elements are already in place   
                   for (j = 0; j &lt; n-i-1; j++) 
                       if (arr[j] > arr[j+1])
                          swap(&amp;arr[j], &amp;arr[j+1]);
            }
              
            /* Function to print an array */
            void printArray(int arr[], int size)
            {
                int i;
                for (i=0; i &lt; size; i++)
                    printf("%d ", arr[i]);
                printf("\n");
            }
              
            // Driver program to test above functions
            int main()
            {
                int arr[] = {64, 34, 25, 12, 22, 11, 90};
                int n = sizeof(arr)/sizeof(arr[0]);
                bubbleSort(arr, n);
                printf("Sorted array: \n");
                printArray(arr, n);
                return 0;
            }
            <h3>Output:-</h3>

            Sorted array:
            11 12 22 25 34 64 90

            <h3>complexity:-</h3>
            Worst and Average Case Time Complexity: O(n*n). 
            Worst case occurs when array is reverse sorted.

            Best Case Time Complexity: O(n). Best case occurs when array is already sorted.
            Worst and Average Case Time Complexity: O(n*n). Worst case occurs when array is 
            reverse sorted.

       </pre>
    </body>

</html>