<!DOCTYPE html>
<html>
    <head>
       <link rel="stylesheet" href="style.css">
    </head>
    <body class="framebody">
        <h1>Binary Tree </h1>
        <pre>
A binary tree is a tree data structure in which each parent node can have 
at most two children. Each node of a binary tree consists of three items:
<ul>
  <li>data item</li>
  <li>address of left child</li>
  <li>address of right child</li>
</ul>

<img src="images/binary-tree2.png">

<b>Types of Binary Tree:</b>

1. Full/Proper/Strict Binary Tree
A full Binary tree is a special type of binary tree in which every parent 
node/internal node has either two or no children.

2. Perfect Binary Tree
A perfect binary tree is a type of binary tree in which every internal node
has exactly two child nodes and all the leaf nodes are at the same level.

3. Complete Binary Tree
A complete binary tree is just like a full binary tree, but with two major 
differences
<ul><li>Every level must be completely filled</li>
<li>All the leaf elements must lean towards the left.</li>
<li>The last leaf element might not have a right sibling i.e. a complete 
  binary tree doesn't have to be a full binary tree.</li></ul>

4. Degenerate or Pathological Tree
A degenerate or pathological tree is the tree having a single child either 
left or right.

5. Skewed Binary Tree
A skewed binary tree is a pathological/degenerate tree in which the tree is 
either dominated by the left nodes or the right nodes.

6. Balanced Binary Tree
It is a type of binary tree in which the difference between the height of the 
left and the right subtree for each node is either 0 or 1.

<img src="images/binarytree.png" width=100%>
<img src="images/skewedBT.png" >

<h2>Properties</h2>
<b>Properties of Binary Tree:</b>
1.At each level of i, the maximum number of nodes is 2<sup>i</sup>.
  Level of the root is 0, number of nodes = 2<sup>0</sup> = 1 
  Level 1, number of nodes = 2<sup>1</sup> = 2
  .
  .
  .
  Level i,  number of nodes = 2<sup>i</sup>

2.The height of the tree is defined as the longest path from the root node to the 
leaf node. Maximum number of nodes possible at height h is
 (2<sup>0</sup> + 2<sup>1</sup> + 2<sup>2</sup>+â€¦.2<sup>h</sup>) = 2<sup>h+1</sup> -1.

3.The minimum number of nodes possible at height h is equal to h+1.

4.If the number of nodes is minimum, then the height of the tree would be maximum. 
Conversely, if the number of nodes is maximum, then the height of the tree would 
be minimum.
If there are 'n' number of nodes in the binary tree.
The minimum height can be computed as:
As we know that,
   n = 2<sup>h+1</sup> -1

=> n+1 = 2<sup>h+1</sup> 

Taking log on both the sides,

=> log<sub>2</sub>(n+1) = log<sub>2</sub>(2<sup>h+1</sup>)

=> log<sub>2</sub>(n+1) = h+1
=> h= log<sub>2</sub>(n+1) -1

The maximum height can be computed as:
As we know that,
  n = h+1
=> h= n-1

5.For any non-empty binary tree with n<sub>0</sub> leaf nodes and n<sub>2</sub> nodes of degree 2, 
n<sub>0</sub> = n<sub>2</sub> + 1

<b>Properties of Full/Proper/Strict Binary Tree:</b>
1.The number of leaf nodes is equal to the number of internal nodes plus 1.

2.The maximum number of nodes is the same as the number of nodes in the binary 
tree, i.e., 2<sup>h+1</sup> -1.

3.The minimum number of nodes in the full binary tree is (2*h)-1.

4.The minimum height of the full binary tree is log<sub>2</sub>(n+1) -1.

5.The maximum height of the full binary tree can be computed as:
    n= 2*h - 1
  => n+1 = 2*h
  => h = n+1/2

<b>Properties of Complete Binary Tree:</b>
1.The minimum number of nodes in complete binary tree is 2<sup>h</sup>.

2.The maximum number of nodes is the same as the number of nodes in the binary 
tree, i.e., 2<sup>h+1</sup> -1.

3.The number of internal nodes in a complete binary tree of n nodes is [n/2].

<b>Tree Traversals:</b>
Following are the generally used ways for traversing trees:- 
(a) Inorder (Left, Root, Right) : 4 2 5 1 3 
   Algorithm Inorder(tree)
   1. Traverse the left subtree, i.e., call Inorder(left-subtree)
   2. Visit the root.
   3. Traverse the right subtree, i.e., call Inorder(right-subtree)

(b) Preorder (Root, Left, Right) : 1 2 4 5 3 
   Algorithm Preorder(tree)
   1. Visit the root.
   2. Traverse the left subtree, i.e., call Preorder(left-subtree)
   3. Traverse the right subtree, i.e., call Preorder(right-subtree) 

(c) Postorder (Left, Right, Root) : 4 5 2 3 1
   Algorithm Postorder(tree)
   1. Traverse the left subtree, i.e., call Postorder(left-subtree)
   2. Traverse the right subtree, i.e., call Postorder(right-subtree)
   3. Visit the root.

<b>Corresponding Code:</b>

// C program for different tree traversals
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
 
/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct node {
    int data;
    struct node* left;
    struct node* right;
};
 
/* Helper function that allocates a new node with the
   given data and NULL left and right pointers. */
struct node* newNode(int data)
{
    struct node* node
        = (struct node*)malloc(sizeof(struct node));
    node->data = data;
    node->left = NULL;
    node->right = NULL;
 
    return (node);
}
 
/* Given a binary tree, print its nodes according to the
  "bottom-up" postorder traversal. */
void printPostorder(struct node* node)
{
    if (node == NULL)
        return;
 
    // first recur on left subtree
    printPostorder(node->left);
 
    // then recur on right subtree
    printPostorder(node->right);
 
    // now deal with the node
    printf("%d ", node->data);
}
 
/* Given a binary tree, print its nodes in inorder*/
void printInorder(struct node* node)
{
    if (node == NULL)
        return;
 
    /* first recur on left child */
    printInorder(node->left);
 
    /* then print the data of node */
    printf("%d ", node->data);
 
    /* now recur on right child */
    printInorder(node->right);
}
 
/* Given a binary tree, print its nodes in preorder*/
void printPreorder(struct node* node)
{
    if (node == NULL)
        return;
 
    /* first print data of node */
    printf("%d ", node->data);
 
    /* then recur on left sutree */
    printPreorder(node->left);
 
    /* now recur on right subtree */
    printPreorder(node->right);
}
 
/* Driver program to test above functions*/
int main()
{
    struct node* root = newNode(1);
    root->left = newNode(2);
    root->right = newNode(3);
    root->left->left = newNode(4);
    root->left->right = newNode(5);
 
    printf("\nPreorder traversal of binary tree is \n");
    printPreorder(root);
 
    printf("\nInorder traversal of binary tree is \n");
    printInorder(root);
 
    printf("\nPostorder traversal of binary tree is \n");
    printPostorder(root);
 
    getchar();
    return 0;
}

<b>Output:</b>

Preorder traversal of binary tree is
1 2 4 5 3 
Inorder traversal of binary tree is
4 2 5 1 3 
Postorder traversal of binary tree is
4 5 2 3 1

<b>Complexity:</b>
Algorithm   Average Worst case
Space        O(n)    O(n)
Search     O(log n)  O(n)
Insert     O(log n)  O(n)
Delete     O(log n)  O(n)

        </pre>
    </body>

</html>