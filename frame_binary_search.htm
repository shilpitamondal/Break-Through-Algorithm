<!DOCTYPE html>
<html>
    <head>
        <link rel="stylesheet" href="style.css">
    </head>
    <body class="framebody"> 
        <h1>Binary Search</h1>
        <pre>
Given a sorted array arr[] of n elements, write a function to search a given element x in arr[].
A simple approach is to do linear search.The time complexity of above algorithm is O(n). Another
approach to perform the same task is using Binary Search.

Binary Search: Search a sorted array by repeatedly dividing the search interval in half. Begin
with an interval covering the whole array. If the value of the search key is less than the item 
in the middle of the interval, narrow the interval to the lower half. Otherwise narrow it to the 
upper half. Repeatedly check until the value is found or the interval is empty.

Example :
        </pre>
        <img src="images/Binary-Search.png" alt width="539" height="300">
        <pre>
            <h3>Corresponding code</h3>
            // C program to implement recursive Binary Search 
            #include &lt;stdio.h&gt; 
                        
            // A recursive binary search function. It returns 
            // location of x in given array arr[l..r] is present, 
            // otherwise -1 
            int binarySearch(int arr[], int l, int r, int x) 
            { 
                if (r >= l) { 
                int mid = l + (r - l) / 2; 
                        
                // If the element is present at the middle 
                // itself 
                if (arr[mid] == x) 
                    return mid; 
                        
                // If element is smaller than mid, then 
                // it can only be present in left subarray 
                if (arr[mid] > x) 
                    return binarySearch(arr, l, mid - 1, x); 
                        
                // Else the element can only be present 
                // in right subarray 
                return binarySearch(arr, mid + 1, r, x); 
                } 
                        
                //if the element is not present in teh array 
                return -1; 
            } 
                        
            int main(void) 
            { 
                int arr[] = { 2, 3, 4, 10, 40 }; 

                //n will give the size of the array
                int n = sizeof(arr) / sizeof(arr[0]); 
                int x = 10; 

                //calling the binary search function
                int result = binarySearch(arr, 0, n - 1, x); 


                (result == -1) ? printf("Element is not present in array") 
                : printf("Element is present at index %d \n",result); 
                return 0; 
            } 

            <h3>Output:-</h3>

            Element is present at index 3

            <h3>complexity:-</h3>
            The time complexity of Binary Search can be written as
             T(n) = T(n/2) + c 
       </pre>
    </body>

</html>