<!DOCTYPE html>
<html>
    <head>
         <link rel="stylesheet" href="style.css">
    </head>
    <body class="framebody">
        <h1>Selection Sort</h1>
        <pre>

<b>Working Principle:</b> The selection sort algorithm sorts an array by repeatedly
finding the minimum element (considering ascending order) from unsorted part and 
putting it at the beginning. The algorithm maintains two subarrays in a given array.

1) The subarray which is already sorted.
2) Remaining subarray which is unsorted.

In every iteration of selection sort, the minimum element (considering ascending 
order) from the unsorted subarray is picked and moved to the sorted subarray.

<b>Example:</b>
Following example explains the above steps:

arr[] = 64 25 12 22 11

// Find the minimum element in arr[0...4]
// and place it at beginning
11 25 12 22 64

// Find the minimum element in arr[1...4]
// and place it at beginning of arr[1...4]
11 12 25 22 64

// Find the minimum element in arr[2...4]
// and place it at beginning of arr[2...4]
11 12 22 25 64

// Find the minimum element in arr[3...4]
// and place it at beginning of arr[3...4]
11 12 22 25 64 

<b>Algorithm:</b>
Step 1 − Set MIN to location 0
Step 2 − Search the minimum element in the list
Step 3 − Swap with value at location MIN
Step 4 − Increment MIN to point to next element
Step 5 − Repeat until list is sorted

<b>Dry Run:</b>
<img src="images/selectionsort.jpg" >

<h3>Corresponding Code:</h3>

#include &lt;stdio.h&gt;
  
void swap(int *xp, int *yp)
{
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
}
  
void selectionSort(int arr[], int n)
{
    int i, j, min_idx;
  
    // One by one move boundary of unsorted subarray
    for (i = 0; i &lt; n-1; i++)
    {
        // Find the minimum element in unsorted array
        min_idx = i;
        for (j = i+1; j &lt; n; j++)
          if (arr[j] &lt; arr[min_idx])
            min_idx = j;
  
        // Swap the found minimum element with the first element
        swap(&amp;arr[min_idx], &amp;arr[i]);
    }
}
  
/* Function to print an array */
void printArray(int arr[], int size)
{
    int i;
    for (i=0; i &lt; size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}
  
// Driver program to test above functions
int main()
{
    int arr[] = {64, 25, 12, 22, 11};
    int n = sizeof(arr)/sizeof(arr[0]);
    selectionSort(arr, n);
    printf("Sorted array: \n");
    printArray(arr, n);
    return 0;
}
<h3>Output: </h3>
Sorted array: 
11 12 22 25 64

<h3>Complexity:</h3>
Selecting the minimum requires scanning n elements (with n-1 comparision) and then 
swapping it into the first position. Finding the next lowest element requires scanning
the remaining n-1 elements (with n-2 comparision) and so on. 
Therefore, the total number of comparisons is

(n-1)+(n-2)+(n-3)+...+2+1 = (n-1)[((n-1)+1)/2] = (1/2)*(n<sup>2</sup>-n)

Worst-case time complexity -  О(n<sup>2</sup>) 
Best-case time complexity  - О(n<sup>2</sup>)
Average-case time complexity  - О(n<sup>2</sup>) 

Space Compplexity: O(1)
Selection sort is an in-place algorithm.It performs all computation in the 
original array and no other array is used.

</pre>
    </body>
</html>